@using Microsoft.AspNetCore.Components 
@using IgniteUI.Blazor.Controls
 
@inject IIgniteUIBlazor IgniteUIBlazor; 

@*style="height: calc(130px - 1rem); padding-top: 1rem; z-index: 300000;" *@ 
<div class="igVertical" >

    @if (Election != null)
    {
        var candidate1 = Election.CandidateLeft;
        var candidate2 = Election.CandidateRight;
        //var candidate1 = Election.Winner;
        //var candidate2 = Election.Looser;
        //if (candidate1.Party == "Republican")
        //{
        //    candidate1 = Election.Looser;
        //    candidate2 = Election.Winner;
        //}
          
            var max = Math.Round(DisplayInterval * 6);
           @*<ItemLegend @ref="Legend" Height="100px" Width="200px"/>*@
           <DataChart Height="100%" Width="100%"
                      @ref="BarChartRef"
                      TitleTopMargin="10"
                      IsHorizontalZoomEnabled="true"
                      IsVerticalZoomEnabled="true"
                      Outlines="@Election.PartyColorsInString"
                      Brushes="@Election.PartyColorsInString">
               
                              @*LabelExtent="60" 
                              Title="@DisplayTitle" 
                              MaximumValue="@max" 
                              Interval="@DisplayInterval" *@
                @*DataSource="@Election.Candidates  Overlap="1" "*@
                    @*<NumberFormatSpecifier Locale="en-US" 
                              LabelFormat="{0}"
                                           MinimumFractionDigits="1">
                    </NumberFormatSpecifier>*@
                @*<CategoryXAxis Name="xAxis" Label="StateSymbol" DataSource="@Election.ResultsByStates"
                               Title="States" TitleLeftMargin="10" TitleRightMargin="0"
                               Interval="1"
                               Gap="0.1" LabelVisibility="@Visibility.Visible"
                               TickLength="0"/>*@
                               
                <NumericXAxis Name="xAxis" Title="Total Votes"
                              TickLength="5" 
                              MajorStrokeThickness=".5" 
                              MajorStroke="gray"
                              LabelLocation="@AxisLabelsLocation.OutsideBottom"
                              LabelVerticalAlignment="@VerticalAlignment.Center"
                              LabelVisibility="@Visibility.Visible"
                              LabelTopMargin="2" IsLogarithmic="true"
                              AbbreviateLargeNumbers="true">
                </NumericXAxis>
                         
                <NumericYAxis Name="yAxis" Title="Votes Percentage"     
                              TickLength="5" 
                              MajorStrokeThickness=".5" 
                              MajorStroke="gray"
                              LabelLocation="@AxisLabelsLocation.OutsideLeft"
                              LabelVerticalAlignment="@VerticalAlignment.Center"
                              LabelVisibility="@Visibility.Visible"
                              LabelTopMargin="2"  IsLogarithmic="false"
                              AbbreviateLargeNumbers="true">
                </NumericYAxis>
                <NumericYAxis Name="yAxis2" Title="Votes Percentage"     
                              TickLength="5" MinimumValue="0" MaximumValue="100"
                              MajorStrokeThickness=".5" 
                              MajorStroke="gray"
                              LabelLocation="@AxisLabelsLocation.OutsideRight"
                              LabelVerticalAlignment="@VerticalAlignment.Center"
                              LabelVisibility="@Visibility.Visible"
                              LabelTopMargin="2"  IsLogarithmic="false"
                              AbbreviateLargeNumbers="true">
                </NumericYAxis>

                 <ScatterSeries
                      XAxisName="xAxis" MarkerOutline="red"
                      YAxisName="yAxis"
                      DataSource="@Election.ResultsByStates"
                      XMemberPath="WinnerVotes" 
                      YMemberPath="WinnerPercentage" 
                                MarkerType="@MarkerType.Circle"
                      Title=""
                      AreaFillOpacity="1"
                      ShowDefaultTooltip="true" 
                      IsHighlightingEnabled="false">
                   </ScatterSeries>

                 <ScatterSeries
                      XAxisName="xAxis" MarkerOutline="dodgerblue"
                      YAxisName="yAxis"
                      DataSource="@Election.ResultsByStates"
                      XMemberPath="LooserVotes" 
                      YMemberPath="LooserPercentage" 
                                MarkerType="@MarkerType.Circle"
                      Title=""
                      AreaFillOpacity="1"
                      ShowDefaultTooltip="true" 
                      IsHighlightingEnabled="false">
                   </ScatterSeries>

                   @*<ColumnSeries
                      XAxisName="xAxis"
                      YAxisName="yAxis"
                      DataSource="@Election.ResultsByStates"
                      ValueMemberPath="@DisplayValue" 
                      Title=""
                      AreaFillOpacity="1"
                      ShowDefaultTooltip="true"
                      IsTransitionInEnabled="false"
                      IsHighlightingEnabled="false">
                   </ColumnSeries>*@

               @*@foreach (var candidate in @Election.StackedCandidates)
               {
                   var candidateList = new List<Candidate>() { candidate };*@
                   @*<BarSeries
                      XAxisName="xAxis"
                      YAxisName="yAxis"
                      DataSource="@Election.ResultsByStates"
                      ValueMemberPath="@DisplayValue" 
                      Title=""
                      AreaFillOpacity="1"
                      ShowDefaultTooltip="true"
                      IsTransitionInEnabled="false"
                      IsHighlightingEnabled="false">
                   </BarSeries>*@
                      @*TooltipTemplate="@CreateTooltip"*@
               @*}*@             
           </DataChart>
    }
         
</div>

@code {

    RenderFragment CreateTooltip(DataContext context)
    {
        var brush = "";
        var votes = "";
        var electors = "";
        var party = "";
        var name = "";

        if (context != null && context.Item != null)
        {
            var item = context.Item as Candidate;
            brush = item.PartyColor;
            name = item.Name;
            party = item.Party;
            votes = item.TotalVotesMilions + "M (" + item.TotalVotesPercent + "%)";
            electors = item.TotalElectors + " (" + item.TotalElectorsPercent + "%)";
        }
        if (DisplayMode == ElectionDisplayMode.Popular)
        {
             return @<div class="ui-tooltip-content" >
               <div>@name (@party)</div>
                <div>Popular Votes: @votes</div>
            </div>;
        }
        else
        {
            //; color: @brush width: 200px; background: @brush
            return @<div class="ui-tooltip-content" >
                @*<div>@item.Name: @item.TotalElectors (@item.TotalElectorsPercent)</div>*@
                <div>@name (@party)</div>
                <div>Electoral Votes: @electors</div> 
                @*<div>@item.Party</div>*@
                @*<div>@brush</div>*@
                @*<div>@item.Name</div>
                <div>Electors: @item.TotalElectors</div>*@
                @*<div>Electors: @item.Stack.TotalElectors</div>*@
            </div>;
        }
    }

    private ElectionDisplayMode _DisplayMode = ElectionDisplayMode.Electoral;
    [Parameter]
    public ElectionDisplayMode DisplayMode
    {
        get { return _DisplayMode; }
        set { _DisplayMode = value; this.OnChanged(); }
    }

  
    public string DisplayValue { get { return DisplayMode == ElectionDisplayMode.Electoral ?
                "WinnerElectors" : "WinnerVotes"; } }

    public string DisplayTitle { get { return DisplayMode == ElectionDisplayMode.Electoral ?
                "Electoral Votes" : "Popular Votes"; } }

    public double DisplayInterval { get { return DisplayMode == ElectionDisplayMode.Electoral ?
                Election.IntervalElectors : Election.IntervalVotes; } }

    public double DisplayMax { get { return DisplayMode == ElectionDisplayMode.Electoral ?
                Election.TotalElectors : Election.TotalVotes; } }

    private DataChart BarChart;
    public DataChart BarChartRef
    {
        get { return BarChart; }
        set { BarChart = value; this.OnChanged(); }
    }

    private Election election;
    [Parameter]
    public Election Election
    {
        get { return election; }
        set { election = value; this.OnChanged(); }
    }
    [Parameter]
    public string style { get; set; }

    public int CurrentYear = 0;

    private void OnChanged()
    {
        //Logger.WriteLine("ElectionChart updating... ");

        //if (this.BarChart != null && this.Election != null)
        //{
        //    //this.BarChart.Legend = Legend;
        //}

        if (this.BarChart != null && this.Election != null && this.Election.Year != this.CurrentYear)
        {
            Logger.WriteLine("ElectionChart OnChanged... " + this.Election.Year);
            this.CurrentYear = this.Election.Year;
            StateHasChanged();
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Logger.WriteLine("ElectionChart OnInitialized");

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        DataChartVerticalCategoryModule.Register(IgniteUIBlazor);
        NumberAbbreviatorModule.Register(IgniteUIBlazor);
        ItemToolTipLayerModule.Register(IgniteUIBlazor);
        CategoryToolTipLayerModule.Register(IgniteUIBlazor);
         
        DataChartScatterModule.Register(IgniteUIBlazor);

        LegendModule.Register(IgniteUIBlazor);
        ItemLegendModule.Register(IgniteUIBlazor);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //Logger.WriteLine("ElectionChart OnInitializedAsync");

        await Task.Delay(1);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Logger.WriteLine("ElectionChart Rendering...");
            OnChanged();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

}

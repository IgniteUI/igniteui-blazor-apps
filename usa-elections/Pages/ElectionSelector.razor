@using Microsoft.AspNetCore.Components 
@using IgniteUI.Blazor.Controls
 
@inject IIgniteUIBlazor IgniteUIBlazor; 

<div class="igFill" style="height: calc(100% - 2.75rem);" >

    <DataGrid Height="100%" Width="100%" @ref="@GridRef"
              AutoGenerateColumns="false"
              DataSource="@Elections"
              SelectionMode="@GridSelectionMode.SingleRow"
              HeaderHeight="32" RowHeight="40"
              IsColumnOptionsEnabled="false"
              ColumnMovingMode="@ColumnMovingMode.None"
              ColumnResizingMode="@ColumnResizingMode.None" 
              
              HeaderFontFamily="Titillium Web"
              HeaderFontSize="12"
              HeaderTextColor="#27265F"
              HeaderBackground="#E7EAF7">

        <TextColumn Field="Title" HeaderText="ELECTIONS" 
                    IsEditable="false"
                    HorizontalAlignment="CellContentHorizontalAlignment.Center" />
                 
    </DataGrid> 
</div>

@code {     

    private DataGrid GridRef;

    private List<Election> elections;
    [Parameter]
    public List<Election> Elections
    {
        get { return elections; }
        set { elections = value; this.OnChanged(); }
    }

    public int CurrentYear = 0;

    private void OnChanged()
    {
        if (this.Elections != null)
        {
            Logger.WriteLine("ElectionSelector OnChanged... " + this.Elections.Count);
            //this.CurrentYear = this.Election.Year;
        }
        StateHasChanged();
    }

    //Action<GridSelectedCellsChangedEventArgs> SelectedCellsChanged { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Logger.WriteLine("ElectionSelector OnInitialized");

        DataGridModule.Register(IgniteUIBlazor);

        var allElections = new List<Election>();
        //allElections.Add(new Election { Year = 2022, Index = -1 } );
        allElections.Add(new Election { Year = 2020, Index = 0 } );

        var i = 1;
        //for (int year = 2016; year > 1792; year -= 4)
        for (int year = 2016; year >= 1940; year -= 4)
        {
            var e = new Election();
            e.Year = year;
            allElections.Add(e);
            i++;
        }

        foreach (var e in allElections)
        {
            e.Title = e.Year.ToString();
        }

        //allElections.Add(new Election { Year = 1789, Index = i  } );

        Console.WriteLine("ElectionSelector with " + allElections.Count + " elections");

        this.Elections = allElections;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //Logger.WriteLine("ElectionSelector OnInitializedAsync");

        await Task.Delay(1);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (GridRef != null)
            {
                //Console.WriteLine("ElectionSelector GridRef ");
                //GridRef.SelectedCellsChanged += OnSelectedCellsChanged;
                GridRef.SelectedItemsChanged += OnSelectedItemsChanged;
            }
            OnChanged();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected void OnSelectedItemsChanged(GridSelectedItemsChangedEventArgs e)
    {
        var election = e.CurrentItems[0] as Election;
        Console.WriteLine("Selector OnElectionChanged " + election.Year);
        this.Changed.InvokeAsync(election.Year);
    }

    protected void OnSelectedCellsChanged(GridSelectedCellsChangedEventArgs e)
    {
        var election = e.CurrentCells[0].RowItem as Election;
        Console.WriteLine("Selector OnElectionChanged " + election.Year);

        this.Changed.InvokeAsync(election.Year);
    }

    [Parameter] public EventCallback<int> Changed { get; set; }
}

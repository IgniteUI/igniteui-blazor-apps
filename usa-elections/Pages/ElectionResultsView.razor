@using System.Net.Http
@using System.Net.Http.Json
@using IgniteUI.Blazor.Controls

@inject HttpClient Http
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject Infragistics.Samples.ElectionService ElectionService

<div class="igContainer">

    <div class="igComponent">
       
        @if (SelectedElection != null && SelectedElection.ResultsByCandidates != null)
        {
            <div style="padding: 10px; height: 30px; text-align:center">US Election Results in @SelectedElection.Year</div>

            <DataGrid Height="calc(100% - 50px)" Width="100%"
                      AutoGenerateColumns="false"
                      DataSource="@SelectedElection.ResultsByCandidates" 
                      @ref="@ElectionByCandidatesGridRef"
                      SummaryScope="@GridSummaryScope"
                      GroupSummaryDisplayMode="@GridGroupSummaryDisplayMode"
                      GroupHeaderDisplayMode="@GridSectionDisplayMode"
                      IsGroupCollapsable="true">
                
                <TextColumn Width="200" Field="CandidateSort" HeaderText="Candidate" />
                <TextColumn Width="100" Field="State" HeaderText="States"  
                            HorizontalAlignment="CellContentHorizontalAlignment.Center"/>
                
                            @*CellUpdatingScript="onUpdatingBackground"*@
                
                <NumericColumn Width="160" Field="E"  HeaderText="Electal Votes"  />
                @*<NumericColumn Width="130" Field="ElectorsPerStatePercentage" HeaderText="%" MaxFractionDigits="1" MinFractionDigits="1"/>*@
                
                <NumericColumn Width="160" Field="V"  HeaderText="Popular Votes" ShowGroupingSeparator="true"  />
                <NumericColumn Width="130" Field="VotesPerStatePercentage" HeaderText="%" MaxFractionDigits="1" MinFractionDigits="1"/>
           
            </DataGrid>
        }

    </div>
</div>

@code {

    private List<Election> AllElections;
    private Election SelectedElection;

    private DataSourceSectionHeaderDisplayMode GridSectionDisplayMode = DataSourceSectionHeaderDisplayMode.Combined;
    private DataSourceSummaryScope GridSummaryScope = DataSourceSummaryScope.Groups;
    private GroupSummaryDisplayMode GridGroupSummaryDisplayMode = GroupSummaryDisplayMode.Cells;

    // Election By Candidates Grid
    private DataGrid ElectionByCandidatesGrid;
    private DataGrid ElectionByCandidatesGridRef
    {
        get { return ElectionByCandidatesGrid; }
        set { ElectionByCandidatesGrid = value; this.OnElectionByCandidatesGridRef(); StateHasChanged(); }
    }

    void OnGridSortChanged(GridSortDescriptionsChangedEventArgs args)
    {
        var sortBy = ElectionByCandidatesGrid.SortDescriptions[0];
        //Console.WriteLine("OnGridSortChanged " + sortBy.Name);
        //Console.WriteLine("OnGridSortChanged " + sortBy.Field);
        //Console.WriteLine("OnGridSortChanged " + sortBy.SortDirection);

        if (this.SelectedElection.ResultsByCandidates != null)
        {
            //this.ElectionByCandidatesGrid.NotifyClearItems(this.SelectedElection.ResultsByCandidates);
            //this.ElectionByCandidatesGrid.DataSource = null;
            //this.SelectedElection.SortBy(sortBy.Field, sortBy.SortDirection);
            //this.ElectionByCandidatesGrid.DataSource = this.SelectedElection.ResultsByCandidates;

            //var sortItems = this.SelectedElection.ResultsByCandidates.SortBy(sortBy.Field, sortBy.SortDirection);
            //if (sortItems != null)
            //{
            //    this.SelectedElection.ResultsByCandidates = sortItems;
            //    this.ElectionByCandidatesGrid.DataSource = this.SelectedElection.ResultsByCandidates;
            //}
        }
    }

    void OnCellClicked(GridCellEventArgs args)
    {
        //Console.WriteLine("OnCellClicked " + args.Type);
    }

    private void OnElectionByCandidatesGridRef()
    {
        ElectionByCandidatesGrid.SortDescriptionsChanged += OnGridSortChanged;
        ElectionByCandidatesGrid.CellClicked += OnCellClicked;

        var ColumnGroup = new ColumnGroupDescription()
        {
            //Field = "State", DisplayName = "State"
            //Field = "CandidateName", DisplayName = "Candidate"
            Field = "CandidateSort", DisplayName = "CandidateSort"
        };
        this.ElectionByCandidatesGrid.GroupDescriptions.Add(ColumnGroup);
        this.ElectionByCandidatesGrid.IsGroupRowSticky = true;
        this.ElectionByCandidatesGrid.IsGroupExpandedDefault = false;

        var SumVotes = new ColumnSummaryDescription()
        {
            Field = "V", DisplayName = "V", Operand = SummaryOperand.Sum
        };
        var SumElectors = new ColumnSummaryDescription()
        {
            Field = "E", DisplayName = "E", Operand = SummaryOperand.Sum
        };
        //var SumPercentage = new ColumnSummaryDescription()
        //{
        //    Field = "TotalPercentage", DisplayName = "%", Operand = SummaryOperand.Sum
        //};
        var SumVotesPerStatePercentage = new ColumnSummaryDescription()
        {
            Field = "VotesPerStatePercentage",
            Operand = SummaryOperand.Custom,
            ProvideCalculatorScript = "onCalculateVotesTotalPercentage"
        };

        var CountStates = new ColumnSummaryDescription()
        {
            Field = "State",
            Operand = SummaryOperand.Custom,
            ProvideCalculatorScript = "onCalculateState"
        };
        //var CountStates = new ColumnSummaryDescription()
        //{
        //    Field = "State", DisplayName = "State", Operand = SummaryOperand.Count
        //};

        //this.ElectionByCandidatesGrid.SummaryDescriptions.Add(CountStates);
        //this.ElectionByCandidatesGrid.SummaryDescriptions.Add(SumVotes);
        //this.ElectionByCandidatesGrid.SummaryDescriptions.Add(SumElectors);
        //this.ElectionByCandidatesGrid.SummaryDescriptions.Add(SumVotesPerStatePercentage);


        //var ColumnSort = new ColumnSortDescription()
        //{
        //    Field = "E", SortDirection = ListSortDirection.Descending
        //};
        //this.ElectionByCandidatesGrid.SortDescriptions.Add(ColumnSort);
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("App OnInitialized");
        base.OnInitialized();

        //Console.WriteLine("App OnInit " + NavManager.BaseUri);
        //Console.WriteLine("App OnInit " + NavManager.Uri);

        DataGridModule.Register(IgniteUIBlazor);
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("App OnInitializedAsync");
        try
        {

            ElectionService.Http = Http;
            await ElectionService.Load();

            Console.WriteLine("Elections rendering...");

            this.SelectedElection = ElectionService.Elections[0];
            //this.ResultsByStates = this.Elections.ResultsByState;
            //this.ResultsByCandidate = this.Elections.ResultsByCandidate;

            Console.WriteLine("Elections rendering... done");

            //Console.WriteLine("SB.Nav toc");
            //System.Diagnostics.Debug.WriteLine("SB.Nav toc.json found: " + elections.Length);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("Elections - error: \n" + ex.ToString());
        }
    }

}

@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using IgniteUI.Blazor.Controls
@using Infragistics.Samples

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IIgniteUIBlazor IgniteUIBlazor
@inject Infragistics.Samples.ElectionService ElectionService

<div class="igPage igUnselectable" style="background: white">
     
    <div class="igToolbar" style="padding-left: 1rem;">
        <div class="igToolbar-title">US Presidential Elections Dashboard</div>
        <div class="igToolbar-actions">
            <img class="igImage igHover" @onclick="onDisplayElectoralVotes" src="images/show_electoral_votes.svg"  style="@ElectorsButtonStyle"/>
            <img class="igImage igHover" @onclick="onDisplayPopularVotes"   src="images/show_popular_votes.svg"    style="@PopularButtonStyle" />
            @*<img class="igImage igHover" @onclick="onDisplayGrid"           src="images/show_data_grid.svg"  />*@
            <img class="igImage igHover" @onclick="onDisplayProductPage"    src="images/show_product_page.svg"  />
        </div>
    </div>

    <div class="igContent" style="background: white">

    <div class="igVertical" style="width: 9.75rem; height: calc(100% - 1rem); padding-top: 1rem;">
        <ElectionSelector Changed="OnElectionChanged"/>
        @*Elections="@AllElections"*@ 
        <div style="font-size: 0.6rem; padding-top: 0.5rem;">Source: Politico and Economist</div>
        <img @onclick="onDisplayProductPage"
             style="height: 2rem; width: 100%; cursor: pointer;" 
             src="images/ig_engine_horizontal_light.svg" />
              
    </div>
        
    <div class="igFill igCenter" style="background: #FFFFFF;"> 
            
        <div class="igFill" style="max-width: 1000px; width: calc(100% - 2rem); justify-content: center; background: #FFFFFF;">
                                  
        <div class="igHorizotnal" style="width: 100%; margin-top: 1rem; justify-content: center;">
            <div class="igButton" style="@ShapeMapButtonStyle" @onclick="onDisplayShapeMap">
                <img class="igImage" style="margin-right: 1rem; padding-left: 0rem" src="images/dv_usa_map.svg" />
                <div>US Map</div>
            </div>
            <div class="igButton" style="@HexButtonStyle" @onclick="onDisplayHexMap">
                <img class="igImage" style="margin-right: 1rem; padding-left: 0rem" src="images/dv_hex_map.svg" />
                <div>Hex Map</div>
            </div>
            @*<div class="igButton" style="@BubbleButtonStyle" @onclick="onDisplayBubbleMap">
                <img class="igImage" style="margin-right: 1rem; padding-left: 0rem" src="images/dv_bubble_map.svg" />
                <div>Bubble Map</div>
            </div>*@
            <div class="igButton" style="@TreeMapButtonStyle" @onclick="onDisplayTreeMap">
                <img class="igImage" style="margin-right: 1rem; padding-left: 0rem" src="images/dv_treemap.svg" />
                <div>Tree Map</div>
            </div>
             @*<div class="igButton" style="@ChartButtonStyle border-radius: .25rem 0px 0px .25rem;" @onclick="onDisplayChartView">Chart</div>*@
        </div>

        <div class="igComponent" style="z-index: 100000; height: auto; padding-top: 0.5rem; align-self: center;">
              <ElectionBar Election="@SelectedElection" DisplayMode="@VotesDisplayMode"/>
            @*<ElectionGuage Election="@SelectedElection" ></ElectionGuage>*@
        </div> 

        <div class="igComponent" style="height: auto; padding-top: 1rem; padding-bottom: 1rem; ">
              <ElectionLegend Election="@SelectedElection" DisplayMode="@VotesDisplayMode"/>
        </div>

        <div class="igFill igRelative" style="height: calc(100% - 1rem); padding-top: 1rem">
            <div class="igFill igOverlay" style="@ShapeMapStyle">
                 @* TODO try shape highliging 
                 SeriesMouseEnterScript="onShapeMouseEnter"
                 SeriesMouseLeaveScript="onShapeMouseLeave"
                 SeriesMouseMoveScript="onShapeMouseMove"
                 *@
                @*<div class="igFill" style="background: rgba(0, 0, 255, 0.25); text-align: left;">ShapeMap</div>*@
                <GeographicMap Height="100%" Width="100%" Zoomable="false"
                           @ref="ShapeMap" 
                           BackgroundContent="@null">
                    <GeographicShapeSeries Outline="black" Thickness="1" 
                                           StyleShapeScript="onShapeStyle" />
                    
                    <GeographicSymbolSeries
                        Name="SymbolSeries" Title="SymbolSeries"
                        DataSource="ShapeLabels"
                        LatitudeMemberPath ="StateCenterY"
                        LongitudeMemberPath="StateCenterX"
                        MarkerTemplateScript="onShapeMarker"
                        TransitionInDuration="0" 
                        TransitionDuration="0"
                        ShowDefaultTooltip="true">
                         @*<TooltipTemplate>
                                 <div style="width: 200px; height: 70px; background: white">
                                     <div style="color: red">series.Title</div>
                                     <div style="color: red">item.StateCenterY</div>
                                     <div style="color: red">context</div>
                                 </div>
                        </TooltipTemplate>*@
                    </GeographicSymbolSeries>
                </GeographicMap>
            </div>

            @*<div class="igFill igOverlay" style="@BubbleMapStyle">
                <ElectionBubbles Election="@SelectedElection" DisplayMode="@VotesDisplayMode"/>
            </div>*@
            
            <div class="igFill igOverlay" style="@HexMapStyle">
                <ElectionHex Election="@SelectedElection" DisplayMode="@VotesDisplayMode"/>
            </div>

            <div class="igFill igOverlay" style="@TreeMapStyle">
                <ElectionTree Election="@SelectedElection" DisplayMode="@VotesDisplayMode"/>
            </div>
            <div class="igFill igOverlay" style="@ChartViewStyle">
                @*<ElectionChart Election="@SelectedElection" DisplayMode="@VotesDisplayMode"/>*@
            </div>
        </div>
        
        @*<div class="igFill" style="@GridStyle">
            <ElectionGrid Election="@SelectedElection"/>
        </div>*@

        </div>
          
    </div>
    @*}*@ 
    
    
    </div>

    <SplashScreen IsVisible="@SplashVisible"/>
</div>

@code { 

    int CurrentElectionYear = 0;
    private void OnElectionChanged(int year)
    {
        //Console.WriteLine("App OnElectionChanged... " + index);
        if (CurrentElectionYear == year) return;

        for (int i = 0; i < ElectionService.Elections.Count; i++)
        {
            var election = ElectionService.Elections[i];
            if (election.Year == year)
            {
                CurrentElectionYear = year;
                this.SelectedElection = election;
                OnUpdateShapeMap();
                break;
            }
        }
    }
    private void OnUpdateShapeMap()
    {
        Logger.WriteLine("ShapeMap OnUpdate ");

        Task.Delay(1).ContinueWith((t) => UpdateMapShapes());
    }

    public bool SplashVisible { get; set; }
    //public string SplashStyle { get { return !GridVisible ? "display: none" : "display: block; max-height: 30%; width: 100%;"; } }

    public bool GridVisible { get; set; }
    //public string GridStyle { get { return !GridVisible ? "display: none" : "display: block; max-height: 30%; width: calc(100% - 2.2rem); padding-left: 1.1rem; padding-right: 0.75rem;"; } }
    public string GridStyle { get { return !GridVisible ? "display: none" : "display: block; max-height: 30%; width: 100%;"; } }

    string GetButtonStyle(bool isVisible)
    {
        return isVisible ?
            "background: #E7EAF7; opacity: 1.0" :
            "background: #FFFFFF; opacity: 0.7";
        //return isVisible ? 
        //    "background: #E7EAF7; color: #27265F; border-color:#27265F" : 
        //    "background: #FFFFFF; color: #A7ADC6; border-color:#A7ADC6"; 
    }

    string GetViewStyle(bool isVisible)
    {
        //return isVisible ? "display: block" : "display: none";
        return isVisible ? "z-index: 10" : "z-index: -10";
    }

    public ResultsDisplayMode MapMode = ResultsDisplayMode.ShapeMap;
    public ElectionDisplayMode VotesDisplayMode { get; set; }

    public string ElectorsButtonStyle { get { return VotesDisplayMode == ElectionDisplayMode.Electoral ? "background: #7772B8" : "background: transparent"; } }
    public string PopularButtonStyle  { get { return VotesDisplayMode == ElectionDisplayMode.Popular ? "background: #7772B8" : "background: transparent"; } }

    public bool   ShapeMapVisible { get { return MapMode == ResultsDisplayMode.ShapeMap; } }
    public string ShapeMapStyle { get { return GetViewStyle(ShapeMapVisible); } }
    public string ShapeMapButtonStyle { get { return GetButtonStyle(ShapeMapVisible); } }

    public bool   TreeMapVisible { get { return MapMode == ResultsDisplayMode.TreeMap; } }
    public string TreeMapStyle { get { return GetViewStyle(TreeMapVisible); } }
    public string TreeMapButtonStyle { get { return GetButtonStyle(TreeMapVisible); } }

    public bool   BubbleMapVisible { get { return MapMode == ResultsDisplayMode.BubbleMap; } }
    public string BubbleMapStyle { get { return GetViewStyle(BubbleMapVisible); } }
    public string BubbleButtonStyle { get { return GetButtonStyle(BubbleMapVisible); } }

    public bool   HexMapVisible { get { return MapMode == ResultsDisplayMode.HexMap; } }
    public string HexMapStyle { get { return GetViewStyle(HexMapVisible); } }
    public string HexButtonStyle { get { return GetButtonStyle(HexMapVisible); } }

    public bool   ChartViewVisible { get { return MapMode == ResultsDisplayMode.ChartView; } }
    public string ChartViewStyle { get { return GetViewStyle(ChartViewVisible); } }
    public string ChartButtonStyle { get { return GetButtonStyle(ChartViewVisible); } }
    
    private List<Election> AllElections;
    private Election SelectedElection;
    
    private DataChart ElectionByStatesChart;
    private DataChart ElectionByStatesChartRef
    {
        get { return ElectionByStatesChart; }
        set { ElectionByStatesChart = value; this.OnElectionByStatesChartRef(); StateHasChanged(); }
    }

    private void onDisplayShapeMap()
    {
        if (this.MapMode == ResultsDisplayMode.ShapeMap) return;

        this.MapMode = ResultsDisplayMode.ShapeMap;
    }

    private void onDisplayHexMap()
    {
        if (this.MapMode == ResultsDisplayMode.HexMap) return;

        this.MapMode = ResultsDisplayMode.HexMap;
    }

    private void onDisplayBubbleMap()
    {
        if (this.MapMode == ResultsDisplayMode.BubbleMap) return;

        this.MapMode = ResultsDisplayMode.BubbleMap;
    }

    private void onDisplayTreeMap()
    {
        if (this.MapMode == ResultsDisplayMode.TreeMap) return;

        this.MapMode = ResultsDisplayMode.TreeMap;
    }

    private void onDisplayChartView()
    {
        if (this.MapMode == ResultsDisplayMode.ChartView) return;

        this.MapMode = ResultsDisplayMode.ChartView;
    }

    private void onDisplayElectoralVotes()
    {
        Logger.WriteLine("onDisplayElectoralVotes " + VotesDisplayMode);

        this.VotesDisplayMode = ElectionDisplayMode.Electoral;
    }

    private void onDisplayPopularVotes()
    {
        Logger.WriteLine("onDisplayPopularVotes " + VotesDisplayMode);

        this.VotesDisplayMode = ElectionDisplayMode.Popular;
    }

    public void onDisplayGrid()
    {
        GridVisible = !GridVisible;
    }

    public void onDisplayProductPage() {
        var url = "https://www.infragistics.com/products/ignite-ui-blazor";
        JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private void OnElectionByStatesChartRef()
    {
        //ElectionByStatesChart.SizeChanged += ElectionChart;
    }

    void OnChartSizeChanged(RectChangedEventArgs args)
    {
        //Logger.WriteLine("OnChartSizeChanged " + args.OldRect.Height + " " + args.OldRect.Width);
        //Logger.WriteLine("OnChartSizeChanged " + args.NewRect.Height + " " + args.NewRect.Width);
    }
    
    private List<ResultsByState>  ShapeLabels;
    private ShapeDataSource       ShapeRecords;
    private GeographicMap         ShapeMap;
    private GeographicShapeSeries ShapeSeries;

    protected override void OnInitialized()
    {
        Logger.WriteLine("App OnInitialized");
        base.OnInitialized();

        SplashVisible = true;
        VotesDisplayMode = ElectionDisplayMode.Electoral;

        DataGridModule.Register(IgniteUIBlazor);

        GeographicMapModule.Register(IgniteUIBlazor);

        LegendModule.Register(IgniteUIBlazor);
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartScatterModule.Register(IgniteUIBlazor);
        DataChartScatterCoreModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        NumberAbbreviatorModule.Register(IgniteUIBlazor);

        StatesWithBoxes = new Dictionary<string, Point>();
        StatesWithSmallArea = new List<string> { "VT", "NH", "MA", "RI", "CT", "NJ", "DE", "DC", "MD"};
        for (int i = 0; i < StatesWithSmallArea.Count; i++)
        {
            //StatesWithBoxes.Add(StatesWithSmallArea[i], new Point(-68, 43 - (i * 1.25)));
            StatesWithBoxes.Add(StatesWithSmallArea[i], new Point(-72 + 100, 40 - (i * 1.5) - (i * i * 0.04)));
        }
    }

    Dictionary<string, Point> StatesWithBoxes;
    List<string> StatesWithSmallArea;

    protected override async Task OnInitializedAsync()
    {
        Logger.WriteLine("App OnInitializedAsync");

        await Task.Delay(1);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.WriteLine("ShapeMap Importing...");

            if (this.ShapeMap != null)
            {
                ShapeSeries = (GeographicShapeSeries)this.ShapeMap.ActualSeries[0];
                ShapeSeries.ShapefileDataSource = (
                    new ShapeDataSource() {
                        Name="choroShapes",
                        //ShapefileSource = "shapes/usa_states_ak_below.shp",
                        //DatabaseSource  = "shapes/usa_states_ak_below.dbf",
                        ShapefileSource = "shapes/usa_states_centered.shp",
                        DatabaseSource  = "shapes/usa_states_centered.dbf",
                        ImportCompleted = new EventCallback<AsyncCompletedEventArgs>(null,
                            (Func<AsyncCompletedEventArgs, Task>)OnImportCompleted)
                    }
                );
            }
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected async Task OnImportCompleted(AsyncCompletedEventArgs args)
    {
        ElectionService.Http = Http;
        await ElectionService.Load();

        this.AllElections = ElectionService.Elections;
        this.SelectedElection = ElectionService.Elections[0];
        //this.ResultsByStates = this.Elections.ResultsByState; 

        Console.WriteLine("ShapeMap Importing... done");
        if (this.ShapeMap != null && this.ShapeSeries != null)
        {
            this.ShapeRecords = this.ShapeSeries.ShapefileDataSource;

            Logger.WriteLine("ShapeMap getting records...");
            var labelPointX = await this.ShapeRecords.GetRecordValuesAsync("NamePosX");
            var labelPointY = await this.ShapeRecords.GetRecordValuesAsync("NamePosY");
            var shapePointX = await this.ShapeRecords.GetRecordValuesAsync("ShapePosX");
            var shapePointY = await this.ShapeRecords.GetRecordValuesAsync("ShapePosY");
            //var shapePointX = await ShapeRecords.GetRecordValuesAsync("CodePosX");
            //var shapePointY = await ShapeRecords.GetRecordValuesAsync("CodePosY");  
            var stateCodes = await this.ShapeRecords.GetRecordValuesAsync("Code");
            var stateNames = await this.ShapeRecords.GetRecordValuesAsync("Name");
            var statehoods = await this.ShapeRecords.GetRecordValuesAsync("Statehood");
            var statePops  = await this.ShapeRecords.GetRecordValuesAsync("Population");

            //var stateArea  = await this.ShapeRecords.GetRecordValuesAsync("Area");
            //var stateRegion  = await this.ShapeRecords.GetRecordValuesAsync("Region");
            //var stateRCode  = await this.ShapeRecords.GetRecordValuesAsync("RegionCode");
            //var stateFips  = await this.ShapeRecords.GetRecordValuesAsync("StateFips");

            var stateWithBox = new string[stateCodes.Length];
            Logger.WriteLine("ShapeMap setting lookup...");
            ShapesLookup = new Dictionary<string, StateInfo>();

            for (var i = 0; i < stateCodes.Length; i++)
            {
                var info = new StateInfo();
                info.Name = (string)stateNames[i];
                info.Code = (string)stateCodes[i];
                info.Statehood = int.Parse(statehoods[i].ToString());
                info.Population = int.Parse(statePops[i].ToString());
                info.Index = i;

                if (StatesWithBoxes.ContainsKey(info.Code))
                {
                    info.CenterX = StatesWithBoxes[info.Code].X;
                    info.CenterY = StatesWithBoxes[info.Code].Y;
                    info.StateHasLabelBox = true;
                    stateWithBox[i] = "true";
                }
                else
                {
                    info.CenterX = (double)shapePointX[i];
                    info.CenterY = (double)shapePointY[i];
                    info.StateHasLabelBox = false;
                    stateWithBox[i] = "false";
                }
                ShapesLookup.Add(info.Code, info);
            }

            await ShapeRecords.SetRecordValuesAsync("StateWithBox", stateWithBox);
        }

        Console.WriteLine("ShapeMap setting lookup... done");

        var offsetX = 3;
        var offsetY = 1.5;
        var geoRect = new Rect(-16 - offsetX, 32 - offsetY, 40 + (offsetX * 2), 10 + (offsetY * 2));
        if (this.ShapeMap != null)
        {
            //Logger.WriteLine("ShapeMap zooming...");
            await this.ShapeMap.UpdateWorldRectAsync(geoRect);
        }

        await UpdateMapShapes();

        SplashVisible = false;

        Console.WriteLine("ShapeMap changing... ");
        StateHasChanged();

        await Task.Delay(1);
    }

    private Dictionary<string, StateInfo> ShapesLookup;

    private async Task UpdateMapShapes()
    {
        if (SelectedElection != null)
        {
            Logger.WriteLine("ShapeMap updating... Election " + this.SelectedElection.Year);

            var results = SelectedElection.ResultsByStates;
            var winnerParty = new string[results.Count];
            var winnerCandidate = new string[results.Count];
            var winnerElectors = new string[results.Count];
            var winnerVotes = new string[results.Count];
            var winnerPercentage = new string[results.Count];

            var shapeSelected = new string[results.Count];
            var electionsHeld = new string[results.Count];
            var electionYear = new string[results.Count];

            var labels = new List<ResultsByState>();
            for (int i = 0; i < results.Count; i++)
            {
                electionYear[i] = SelectedElection.Year.ToString();
                shapeSelected[i] = "false";
                if (ShapesLookup.ContainsKey(results[i].StateSymbol))
                {
                    var state = ShapesLookup[results[i].StateSymbol];
                    var statWithElections = state.Statehood < 1840;
                    var shapeIndex = state.Index;
                    //electionYear[shapeIndex] = "1840"; // state.Statehood.ToString();
                    electionYear[shapeIndex] = state.Statehood.ToString();

                    winnerParty[shapeIndex] = results[i].WinnerParty;
                    winnerCandidate[shapeIndex] = results[i].WinnerName;
                    winnerElectors[shapeIndex] = results[i].WinnerElectors.ToString();
                    winnerVotes[shapeIndex] = results[i].WinnerVotes.ToString();
                    winnerPercentage[shapeIndex] = results[i].WinnerPercentage.ToString();
                    electionsHeld[shapeIndex] = statWithElections.ToString();

                    results[i].StateCenterX = state.CenterX;
                    results[i].StateCenterY = state.CenterY;
                    results[i].StateHasLabelBox = state.StateHasLabelBox;

                    labels.Add(results[i]);
                }
            }

            //await ShapeRecords.SetRecordValuesAsync("WinnerName", winnerCandidate);
            //await ShapeRecords.SetRecordValuesAsync("WinnerVotes", winnerVotes);
            await ShapeRecords.SetRecordValuesAsync("WinnerParty", winnerParty);
            await ShapeRecords.SetRecordValuesAsync("WinnerElectors", winnerElectors);;
            //await ShapeRecords.SetRecordValuesAsync("WinnerPercentage", winnerPercentage);

            await ShapeRecords.SetRecordValuesAsync("ElectionsHeld", electionsHeld);
            await ShapeRecords.SetRecordValuesAsync("ElectionYear", electionYear);
            //await ShapeRecords.SetRecordValuesAsync("ShapeSelected", shapeSelected);

            Logger.WriteLine("ShapeMap updating... done");

            this.ShapeLabels = labels;

            if (this.ShapeMap != null)
            {
                await this.ShapeMap.ActualSeries[0].RenderSeriesAsync(false);
                await this.ShapeMap.ActualSeries[1].RenderSeriesAsync(false);
            }

            Logger.WriteLine("ShapeMap rendering... done");
            //StateHasChanged();
        }

        await Task.Delay(1);
    }

    public enum ResultsDisplayMode
    {
        None = 0,
        ShapeMap = 1,
        BubbleMap = 2,
        HexMap = 3,
        TreeMap = 4,
        ChartView = 5,
    }


}

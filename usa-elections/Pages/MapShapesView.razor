@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using IgniteUI.Blazor.Controls
@using Infragistics.Samples

@inject HttpClient Http
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject Infragistics.Samples.ElectionService ElectionService

<div class="igPage" style="padding-right: 1rem;">

    <div class="igVertical"  style="width: 9rem; height: calc(100% - 2rem); padding-left: 1rem; padding-top: 1rem;">
        <ElectionSelector />
    </div>
        
    @*@if (SelectedElection != null && SelectedElection.ResultsByStates != null)
    {*@
    <div class="igFill igVertical" style="background: white;"> 
            
        <div class="igHorizotnal" style="width: calc(100% - 2rem); padding-left: 1.1rem; padding-right: 0.75rem; margin-top: 1rem">
            <div class="igButton" style="@ElectorsButtonStyle" @onclick="onDisplayElectoralVotes">Electoral Votes</div>
            <div class="igButton" style="@PopularButtonStyle" @onclick="onDisplayPopularVotes">Popular Votes</div> 
        </div>
        
        <div class="igComponent" style="z-index: 100000; height: calc(80px - 1rem); padding-top: 1rem; ">
              <ElectionBar Election="@SelectedElection" DisplayMode="@VotesDisplayMode"/>
            @*<ElectionGuage Election="@SelectedElection" ></ElectionGuage>*@
        </div> 

        <div class="igComponent" style="height: auto; padding-top: 1rem; ">
              <ElectionLegend Election="@SelectedElection" />
        </div>
              
        <div class="igHorizotnal" style="width: calc(100% - 2rem); padding-left: 1.1rem; padding-right: 0.75rem; margin-top: 1rem">
            <div class="igButton" style="@ShapeMapButtonStyle" @onclick="onDisplayShapeMap">US Map</div>
            <div class="igButton" style="@TreeMapButtonStyle" @onclick="onDisplayTreeMap">Tree Map</div>
            <div class="igButton" style="@DiagramButtonStyle" @onclick="onDisplayDiagramMap">Diagram</div>
            <div class="igButton" style="@ChartButtonStyle" @onclick="onDisplayChartView">Chart</div>
        </div>

        @*height: 40%;*@ 
        <div class="igFill igRelative" style="width: calc(100% - 2.2rem); padding-left: 1.1rem; padding-right: 0.75rem; margin-top: 1rem">
            <div class="igFill igOverlay" style="@ShapeMapStyle; opacity: @ShapeMapOpacity">
                 @* TODO apply shape highliging 
                 SeriesMouseEnterScript="onShapeMouseEnter"
                 SeriesMouseLeaveScript="onShapeMouseLeave"
                 SeriesMouseMoveScript="onShapeMouseMove"
                 *@
                @*<div class="igFill" style="background: rgba(0, 0, 255, 0.25); text-align: left;">ShapeMap</div>*@
                <GeographicMap Height="100%" Width="100%" Zoomable="true"
                           @ref="ShapeMap" 
                           BackgroundContent="@null">
                    <GeographicShapeSeries Outline="black" Thickness="0.5" 
                                           StyleShapeScript="onStyleShape" /> 
                    <GeographicSymbolSeries
                        Name="labels" Title="Bubble"
                        DataSource="MapLabels"
                        LatitudeMemberPath ="StateCenterY"
                        LongitudeMemberPath="StateCenterX"
                        MarkerTemplateScript="onTemplateMarker"
                        TransitionInDuration="0" TransitionDuration="0"
                        ShowDefaultTooltip="true">
                         <TooltipTemplate>
                                 <div style="width: 200px; height: 70px; background: white">
                                     <div style="color: red">series.Title</div>
                                     <div style="color: red">item.StateCenterY</div>
                                     <div style="color: red">context</div>
                                 </div>
                        </TooltipTemplate>
                    </GeographicSymbolSeries>
                </GeographicMap>
            </div>
            <div class="igFill igOverlay" style="@DiagramMapStyle; opacity: @DiagramMapOpacity">
                @*<div class="igFill" style="background: rgba(0, 255, 0, 0.25); text-align: center;">DiagramMap</div>*@
                <GeographicMap Height="100%" Width="100%" Zoomable="true"
                           @ref="DiagramMap" 
                           BackgroundContent="@null">
                    <GeographicSymbolSeries Name="bubbles"
                        DataSource="@MapLabels"
                        LatitudeMemberPath ="StateLocationY"
                        LongitudeMemberPath="StateLocationX"
                        MarkerTemplateScript="onTemplateBubble"
                        ShowDefaultTooltip="true" >
                    </GeographicSymbolSeries> 
                </GeographicMap>
            </div>

            <div class="igFill igOverlay" style="@TreeMapStyle; opacity: @TreeMapOpacity">
                <ElectionTree Election="@SelectedElection" DisplayMode="@VotesDisplayMode"/>
            </div>
        </div>
        
        <div class="igFill" style="max-height: 30%; width: calc(100% - 2.2rem); padding-left: 1.1rem; padding-right: 0.75rem; ">
            <ElectionGrid Election="@SelectedElection"/>
        </div>
          
    </div>
    @*}*@ 
    
    <div class="igContainer-vertical" style="z-index: 10; width: auto; min-width: 130px; display: none">
        <button @onclick="onDisplayElectoralVotes" >Electors</button>
        <button @onclick="onDisplayPopularVotes" >Votes</button>
        
        <button @onclick="onDisplayDiagramMap">Bubble</button>
        <button @onclick="onDisplayShapeMap">Shapes</button>
        <button @onclick="onDisplayTreeMap">Tree</button>
        @*<button @onclick="onFadeShapeMap">Opacity</button>*@
    </div>
</div>

@code {
    //private ResultsDisplayMode MapMode = ResultsDisplayMode.None;
    private ResultsDisplayMode MapMode = ResultsDisplayMode.ShapeMap;
    public ElectionDisplayMode VotesDisplayMode { get; set; }

    public string ChartButtonStyle { get { return ChartViewVisible ? "background: #FFFFFF" : "background: #ECECEC"; } }
    public string TreeMapButtonStyle { get { return TreeMapVisible ? "background: #FFFFFF" : "background: #ECECEC"; } }
    public string ShapeMapButtonStyle { get { return ShapeMapVisible ? "background: #FFFFFF" : "background: #ECECEC"; } }
    public string DiagramButtonStyle { get { return DiagramMapVisible ? "background: #FFFFFF" : "background: #ECECEC"; } }

    public string ElectorsButtonStyle { get { return VotesDisplayMode == ElectionDisplayMode.Electoral ? "background: #FFFFFF" : "background: #ECECEC"; } }
    public string PopularButtonStyle { get { return VotesDisplayMode == ElectionDisplayMode.Popular ? "background: #FFFFFF" : "background: #ECECEC"; } }

    public bool   ShapeMapVisible { get { return MapMode == ResultsDisplayMode.ShapeMap; } }
    public string ShapeMapStyle { get { return ShapeMapVisible ? "display: block" : "display: none"; } }
    //public string ShapeMapStyle  { get { return "display: block"; } }
    //public string ShapeMapDisplay { get { return ShapeMapVisible ? "z-index: 1" : "z-index: -1"; } }

    public bool   TreeMapVisible { get { return MapMode == ResultsDisplayMode.TreeMap; } }
    public string TreeMapStyle { get { return TreeMapVisible ? "display: block" : "display: none"; } }
    //public string TreeMapStyle { get { return "display: block"; } }
    //public string TreeMapDisplay { get { return TreeMapVisible ? "z-index: 1" : "z-index: -1"; } }

    public bool   DiagramMapVisible { get { return MapMode == ResultsDisplayMode.DiagramMap; } }
    public string DiagramMapStyle { get { return DiagramMapVisible ? "display: block" : "display: none"; } }
    //public string DiagramMapStyle { get { return "display: block"; } }
    //public string DiagramMapDisplay { get { return DiagramMapVisible ? "z-index: 1" : "z-index: -1"; } }

    public bool   ChartViewVisible { get { return MapMode == ResultsDisplayMode.ChartView; } }
    public string ChartViewStyle { get { return ChartViewVisible ? "display: block" : "display: none"; } }

    private SizeScale SizeScale;

    private List<Election> AllElections;
    private Election SelectedElection;
    //private List<CandidateResult> ResultsByCandidate;
    //private List<ResultsByState> ResultsByStates;
    private List<ResultsByState> ResultsByStates2;

    //private ElectionDisplayMode VotesDisplayMode = ElectionDisplayMode.Electoral;
    private DataSourceSectionHeaderDisplayMode GridSectionDisplayMode = DataSourceSectionHeaderDisplayMode.Combined;
    private DataSourceSummaryScope GridSummaryScope = DataSourceSummaryScope.Groups;
    private GroupSummaryDisplayMode GridGroupSummaryDisplayMode = GroupSummaryDisplayMode.Cells;

    private DataChart ElectionByStatesChart;
    private DataChart ElectionByStatesChartRef
    {
        get { return ElectionByStatesChart; }
        set { ElectionByStatesChart = value; this.OnElectionByStatesChartRef(); StateHasChanged(); }
    }

    private bool isAnimating = false;

    private void OnTimerTick()
    {
        if (this.isAnimating)
        {
            this.ShapeMapOpacity  += ShapeMapOpacityStep;
            this.DiagramMapOpacity += DiagramMapOpacityStep;

            if (this.ShapeMapOpacity < 0.0)
            {
                this.ShapeMapOpacity = 0.0;
                this.isAnimating = false;
            }
            else if (this.ShapeMapOpacity > 1.0)
            {
                this.ShapeMapOpacity = 1.0;
                this.isAnimating = false;
            }

            if (this.DiagramMapOpacity < 0.0)
            {
                this.DiagramMapOpacity = 0.0;
                this.isAnimating = false;
            }
            else if (this.DiagramMapOpacity > 1.0)
            {
                this.DiagramMapOpacity = 1.0;
                this.isAnimating = false;
            }

            if (this.isAnimating)
            {
                //Console.WriteLine("OnTimerTick " + ShapeMapOpacity);                  
            }
            else
            {
                Console.WriteLine("OnTimerTick " + ShapeMapOpacity + " stop");
            }

            Task.Delay(200).ContinueWith((t) => OnTimerTick());
            this.StateHasChanged();
        }
    }

    private double ShapeMapOpacity = 1.0; //0.4;
    private double DiagramMapOpacity = 0.0;
    private double TreeMapOpacity = 1.0;
    private double ShapeMapOpacityStep = 0.1;
    private double DiagramMapOpacityStep = 0.1;
    private double TreeMapOpacityStep = 0.1;

    private void onFadeAnimateShapeMap()
    {
        if (!this.isAnimating)
        {
            this.ShapeMapOpacity = 0.0;
            this.ShapeMapOpacityStep = 0.05;
            this.DiagramMapOpacity = 1.0;
            this.DiagramMapOpacityStep = -0.05;
            this.isAnimating = true;

            Task.Delay(200).ContinueWith((t) => OnTimerTick());
        }
        else
        {
            this.isAnimating = false;
        }
    }

    private void onFadeShapeMap()
    {
        this.DiagramMapOpacity = 0.0;
        this.ShapeMapOpacity = 1.0;
        this.TreeMapOpacity = 0.0;
        this.StateHasChanged();
    }

    private void onFadeDiagramMap()
    {
        this.DiagramMapOpacity = 1.0;
        this.ShapeMapOpacity = 0.0;
        this.TreeMapOpacity = 0.0;
        this.StateHasChanged();
    }

    private void onFadeTreeMap()
    {
        this.DiagramMapOpacity = 0.0;
        this.ShapeMapOpacity = 0.0;
        this.TreeMapOpacity = 1.0;
        this.StateHasChanged();
    }

    private void onDisplayShapeMap()
    {
        if (this.MapMode == ResultsDisplayMode.ShapeMap) return;

        this.ShapeMapOpacity = 0.0;
        this.MapMode = ResultsDisplayMode.ShapeMap;

        Task.Delay(350).ContinueWith((t) => onFadeShapeMap());
    }

    private void onDisplayDiagramMap()
    {
        if (this.MapMode == ResultsDisplayMode.DiagramMap) return;

        this.DiagramMapOpacity = 0.0;
        this.MapMode = ResultsDisplayMode.DiagramMap;

        Task.Delay(350).ContinueWith((t) => onFadeDiagramMap());
    }

    private void onDisplayTreeMap()
    {
        if (this.MapMode == ResultsDisplayMode.TreeMap) return;

        this.TreeMapOpacity = 0.0;
        this.MapMode = ResultsDisplayMode.TreeMap;

        Task.Delay(350).ContinueWith((t) => onFadeTreeMap());
    }

    private void onDisplayChartView()
    {
        if (this.MapMode == ResultsDisplayMode.ChartView) return;

        //this.DiagramMapOpacity = 0.0;
        this.MapMode = ResultsDisplayMode.ChartView;

        //Task.Delay(350).ContinueWith((t) => onFadeDiagramMap());
    }

    private void onDisplayElectoralVotes()
    {
        Console.WriteLine("onDisplayElectoralVotes " + VotesDisplayMode);

        this.VotesDisplayMode = ElectionDisplayMode.Electoral;
        this.StateHasChanged();
    }
    private void onDisplayPopularVotes()
    {
        Console.WriteLine("onDisplayPopularVotes " + VotesDisplayMode);

        this.VotesDisplayMode = ElectionDisplayMode.Popular;
        this.StateHasChanged();
    }

    private void OnElectionByStatesChartRef()
    {
        //ElectionByStatesChart.SizeChanged
        //ElectionByStatesChart.SizeChanged += ElectionChart;
    }

    void OnChartSizeChanged(RectChangedEventArgs args)
    {
        Console.WriteLine("OnChartSizeChanged " + args.OldRect.Height + " " + args.OldRect.Width);
        Console.WriteLine("OnChartSizeChanged " + args.NewRect.Height + " " + args.NewRect.Width);
    }

    // Election By States Grid
    private DataGrid ElectionByStatesGrid;
    private DataGrid ElectionByStatesGridRef
    {
        get { return ElectionByStatesGrid; }
        set { ElectionByStatesGrid = value; this.OnElectionByStatesGridRef(); StateHasChanged(); }
    }
    private void OnElectionByStatesGridRef()
    {
    }

    private GeographicMap DiagramMap;
    private GeographicMap ShapeMap;
    private ShapeDataSource Shapes;
    private List<ResultsByState> MapLabels;

    protected override void OnInitialized()
    {
        Console.WriteLine("App OnInitialized");
        base.OnInitialized();

        VotesDisplayMode = ElectionDisplayMode.Electoral;

        DataGridModule.Register(IgniteUIBlazor);

        GeographicMapModule.Register(IgniteUIBlazor);
        //GeographicShapeSeries ss  = null;

        LegendModule.Register(IgniteUIBlazor);
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartScatterModule.Register(IgniteUIBlazor);
        DataChartScatterCoreModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        NumberAbbreviatorModule.Register(IgniteUIBlazor);

        this.SizeScale = new SizeScale();
        this.SizeScale.MinimumValue = 30;
        this.SizeScale.MaximumValue = 30;

        StatesWithBoxes = new Dictionary<string, Point>();
        StatesWithSmallArea = new List<string> { "VT", "NH", "MA", "RI", "CT", "NJ", "DE", "DC", "MD"};
        for (int i = 0; i < StatesWithSmallArea.Count; i++)
        {
            //StatesWithBoxes.Add(StatesWithSmallArea[i], new Point(-68, 43 - (i * 1.25)));
            StatesWithBoxes.Add(StatesWithSmallArea[i], new Point(-72, 40 - (i * 1.5) - (i * i * 0.04)));
        }
    }

    Dictionary<string, Point> StatesWithBoxes;
    List<string> StatesWithSmallArea;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("App OnInitializedAsync");
        try
        {
            //ElectionService.Http = Http;
            //await ElectionService.Load();

            ////await ElectionService.Parse(elections);
            //Console.WriteLine("App rendering...");

            //this.SelectedElection = ElectionService.Elections[0];
            ////this.ResultsByStates = this.Elections.ResultsByState;
            //this.ResultsByStates2 = null;

            //await UpdateMapShapes();
            //this.ResultsByCandidate = this.Elections.ResultsByCandidate;

            //Console.WriteLine("App rendering... done");
            //Console.WriteLine("SB.Nav toc");
            //System.Diagnostics.Debug.WriteLine("SB.Nav toc.json found: " + elections.Length);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("Elections - error: \n" + ex.ToString());
        }

        await Task.Delay(1);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Map Shapes Importing...");

            if (this.ShapeMap != null)
            {
                ((GeographicShapeSeries)this.ShapeMap.ActualSeries[0]).
                ShapefileDataSource = (
                    new ShapeDataSource() {
                        Name="choroShapes",
                        ShapefileSource = "shapes/usa_states_ak_below.shp",
                        DatabaseSource  = "shapes/usa_states_ak_below.dbf",
                        ImportCompleted = new EventCallback<AsyncCompletedEventArgs>(null,
                            (Func<AsyncCompletedEventArgs, Task>)OnImportCompleted)
                    }
                );
            }
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected async Task OnImportCompleted(AsyncCompletedEventArgs args)
    {
        Console.WriteLine("Map Shapes Importing... done");

        ElectionService.Http = Http;
        await ElectionService.Load();
        this.SelectedElection = ElectionService.Elections[0];
        //this.ResultsByStates = this.Elections.ResultsByState;
        this.ResultsByStates2 = null;

        if (this.ShapeMap != null)
        {
            this.Shapes = ((GeographicShapeSeries)this.ShapeMap.ActualSeries[0]).ShapefileDataSource;

            Console.WriteLine("Map getting records...");
            var labelPointX = await this.Shapes.GetRecordValuesAsync("NamePosX");
            var labelPointY = await this.Shapes.GetRecordValuesAsync("NamePosY");
            var shapePointX = await this.Shapes.GetRecordValuesAsync("ShapePosX");
            var shapePointY = await this.Shapes.GetRecordValuesAsync("ShapePosY");
            //var shapePointX = await Shapes.GetRecordValuesAsync("CodePosX");
            //var shapePointY = await Shapes.GetRecordValuesAsync("CodePosY");  
            var stateCodes = await this.Shapes.GetRecordValuesAsync("Code");
            var stateNames = await this.Shapes.GetRecordValuesAsync("Name");
            var statehoods = await this.Shapes.GetRecordValuesAsync("Statehood");

            var stateWithBox = new string[stateCodes.Length];
            Console.WriteLine("Map setting lookup...");
            ShapesLookup = new Dictionary<string, StateInfo>();
            for (var i = 0; i < stateCodes.Length; i++)
            {
                var info = new StateInfo();
                info.Name = (string)stateNames[i];
                info.Code = (string)stateCodes[i];
                info.CreationYear = int.Parse(statehoods[i].ToString());
                info.Index = i;
                if (StatesWithBoxes.ContainsKey(info.Code))
                {
                    info.CenterX = StatesWithBoxes[info.Code].X;
                    info.CenterY = StatesWithBoxes[info.Code].Y;
                    info.StateHasLabelBox = true;
                    stateWithBox[i] = "true";
                }
                else
                {
                    info.CenterX = (double)shapePointX[i];
                    info.CenterY = (double)shapePointY[i];
                    info.StateHasLabelBox = false;
                    stateWithBox[i] = "false";
                }
                ShapesLookup.Add(info.Code, info);
            }

            await Shapes.SetRecordValuesAsync("StateWithBox", stateWithBox);
        }

        //Console.WriteLine("Map setting lookup... Complete");

        //Console.WriteLine("Map Shapes codes: " + stateCodes.Length);
        ////Console.WriteLine("" + string.Join(", ", stateCodes));

        //var shapeBounds = new Rect(-130, 20, 65, 30);
        var shapeBounds = new Rect(-125, 25, 55, 20);
        if (this.ShapeMap != null)
            await this.ShapeMap.UpdateWorldRectAsync(shapeBounds);

        //var bubbleBounds = new Rect(-6, -6, 10, 10);
        var bubbleBounds = new Rect(-8, -8, 12, 12);
        if (this.DiagramMap != null)
            await this.DiagramMap.UpdateWorldRectAsync(bubbleBounds);

        //Console.WriteLine("Map zooming... Complete");

        await UpdateMapShapes();

    }
    private Dictionary<string, StateInfo> ShapesLookup;

    private async Task UpdateMapShapes()
    {
        if (SelectedElection != null)
        {
            Console.WriteLine("Map Shapes updating... Election " + this.SelectedElection.Year);

            var results = SelectedElection.ResultsByStates;
            var winnerParty = new string[results.Count];
            var winnerCandidate = new string[results.Count];
            var winnerElectors = new string[results.Count];
            var winnerVotes = new string[results.Count];
            var winnerPercentage = new string[results.Count];

            var shapeSelected = new string[results.Count];
            //var shapeReady = new string[results.Count];
            var stateHeldElections = new string[results.Count];
            var electionYear = new string[results.Count];

            var labels = new List<ResultsByState>();
            for (int i = 0; i < results.Count; i++)
            {
                //var result = SelectedElection.ResultsByStates[i];
                //electionYear[i] = "1840"; // SelectedElection.Year.ToString();
                electionYear[i] = SelectedElection.Year.ToString();
                shapeSelected[i] = "false";
                //shapeReady[i] = "true";
                if (ShapesLookup.ContainsKey(results[i].StateSymbol))
                {
                    var state = ShapesLookup[results[i].StateSymbol];
                    var statWithElections = state.CreationYear < 1840;
                    var shapeIndex = state.Index;
                    //electionYear[shapeIndex] = "1840"; // state.CreationYear.ToString();
                    electionYear[shapeIndex] = state.CreationYear.ToString();

                    winnerParty[shapeIndex] = results[i].WinnerParty;
                    winnerCandidate[shapeIndex] = results[i].WinnerName;
                    winnerElectors[shapeIndex] = results[i].WinnerElectors.ToString();
                    winnerVotes[shapeIndex] = results[i].WinnerVotes.ToString();
                    winnerPercentage[shapeIndex] = results[i].WinnerPercentage.ToString();
                    stateHeldElections[shapeIndex] = statWithElections.ToString();

                    results[i].StateCenterX = state.CenterX;
                    results[i].StateCenterY = state.CenterY;
                    results[i].StateHasLabelBox = state.StateHasLabelBox;

                    labels.Add(results[i]);
                }
            }

            await Shapes.SetRecordValuesAsync("WinnerParty", winnerParty);
            await Shapes.SetRecordValuesAsync("WinnerName", winnerCandidate);
            await Shapes.SetRecordValuesAsync("WinnerElectors", winnerElectors);
            await Shapes.SetRecordValuesAsync("WinnerVotes", winnerVotes);
            //await Shapes.SetRecordValuesAsync("WinnerPercentage", winnerPercentage);

            await Shapes.SetRecordValuesAsync("HasElections", stateHeldElections);
            await Shapes.SetRecordValuesAsync("ElectionYear", electionYear);
            await Shapes.SetRecordValuesAsync("ShapeSelected", shapeSelected);
            //await Shapes.SetRecordValuesAsync("ShapeReady", shapeReady);

            //Console.WriteLine("Map Shapes updating... Complete ");

            Console.WriteLine("Map rendering... ");
            if (this.ShapeMap != null) {
                await this.ShapeMap.ActualSeries[0].RenderSeriesAsync(false);
                await this.ShapeMap.ActualSeries[1].RenderSeriesAsync(false);
            }
            //await this.DiagramMap.ActualSeries[0].RenderSeriesAsync(false);
            //await map.ActualSeries[1].RenderSeriesAsync(false);

            this.MapLabels = labels;

            StateHasChanged();
        }

        await Task.Delay(1);

    }

    public enum ResultsDisplayMode
    {
        None = 0,
        ShapeMap = 1,
        DiagramMap = 2,
        TreeMap = 3,
        ChartView = 4,
    }


}

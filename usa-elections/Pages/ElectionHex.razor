@using Microsoft.AspNetCore.Components 
@using IgniteUI.Blazor.Controls
 
@inject IIgniteUIBlazor IgniteUIBlazor; 

@*style="height: calc(130px - 1rem); padding-top: 1rem; z-index: 300000;" *@ 

<div class="igFill igOverflow" style="background: white">
      
    <GeographicMap Height="100%" Width="100%" Zoomable="false"
                   @ref="HexMap"
                   BackgroundContent="@null"
                   SeriesMouseEnterScript="onMapMouseEnter">
                   @*SeriesMouseLeftButtonDownScript="onHexShapeMouseDown"*@
        <GeographicShapeSeries Outline="black" 
                               Brush="black" 
                               Thickness="1.0"
                               StyleShapeScript="onHexShapeStyle"
                               MarkerTemplateScript="onHexMarkerStyle"
                               ShowDefaultTooltip="false"/> 
                               @*TooltipTemplate="@CreateTooltip"*@
    </GeographicMap>

</div>

@code {
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Logger.WriteLine("ElectionHex OnInitialized");

        GeographicMapModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //Logger.WriteLine("ElectionHex OnInitializedAsync");

        await Task.Delay(1);
    }

    private GeographicMap         HexMap;
    private GeographicShapeSeries HexSeries;
    private ShapeDataSource       HexShapes;
    private Dictionary<string, StateInfo> StatesLookup;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.WriteLine("ElectionHex Shapes Importing...");

            if (this.HexMap != null)
            {
                HexSeries = (GeographicShapeSeries)this.HexMap.ActualSeries[0];
                HexSeries.ShapefileDataSource = (
                    new ShapeDataSource() {
                        Name="hexSeries",
                        //ImportCompletedScript = "onHexImportCompleted",
                        ShapefileSource = "shapes/usa_states_hex_map.shp",
                        DatabaseSource  = "shapes/usa_states_hex_map.dbf",
                        ImportCompleted = new EventCallback<AsyncCompletedEventArgs>(null,
                            (Func<AsyncCompletedEventArgs, Task>)OnImportCompleted)
                    }
                );
            }
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected async Task OnImportCompleted(AsyncCompletedEventArgs args)
    {
        Console.WriteLine("ElectionHex Shapes Importing... done");

        //Console.WriteLine("ElectionHex Shapes Initalizing... ");
        if (this.HexMap != null && HexSeries != null)
        {
            this.HexShapes = HexSeries.ShapefileDataSource;

            var stateCodes = await this.HexShapes.GetRecordValuesAsync("Code");
            var stateNames = await this.HexShapes.GetRecordValuesAsync("Name");
            var statehoods = await this.HexShapes.GetRecordValuesAsync("Statehood");
            var statePops  = await this.HexShapes.GetRecordValuesAsync("Population");

            var winnerParty      = new string[stateCodes.Length];
            var winnerEditable   = new string[stateCodes.Length];
            var winnerElectors   = new string[stateCodes.Length];
            var winnerVotes      = new string[stateCodes.Length];
            var winnerPercentage = new string[stateCodes.Length];
            var winnerCandidate  = new string[stateCodes.Length];

            var looserParty      = new string[stateCodes.Length];
            var looserEditable   = new string[stateCodes.Length];
            var looserElectors   = new string[stateCodes.Length];
            var looserVotes      = new string[stateCodes.Length];
            var looserPercentage = new string[stateCodes.Length];
            var looserCandidate  = new string[stateCodes.Length];

            var ElectionYear     = new string[stateCodes.Length];
            var ElectionMode     = new string[stateCodes.Length];

            StatesLookup = new Dictionary<string, StateInfo>();

            var rand = new Random();
            var parties = new List<string> { "Republican", "Democrat", "Tossup" };
            for (var i = 0; i < stateCodes.Length; i++)
            {
                var info = new StateInfo();
                info.Name = (string)stateNames[i];
                info.Code = (string)stateCodes[i];
                info.Statehood = int.Parse(statehoods[i].ToString());
                info.Population = int.Parse(statePops[i].ToString());
                info.Index = i;

                StatesLookup.Add(info.Code, info);
                //ElectionService.Update(info);

                // genering dummy data
                var p = rand.Next(0, parties.Count);
                winnerCandidate[i] = "Winner";
                winnerParty[i] = parties[p];
                winnerElectors[i] = rand.Next(5, 50).ToString();
                winnerVotes[i] = (rand.Next(100000, 5000000) + rand.Next(100000, 700000)).ToString();
                winnerPercentage[i] = rand.Next(5, 70).ToString();

                winnerEditable[i] = "true";
                ElectionYear[i] = "1880";
                ElectionMode[i] = ElectionDisplayMode.Popular.ToString();

                p = rand.Next(0, parties.Count);
                looserCandidate[i] = "Looser";
                looserParty[i] = "Republican"; // parties[p];
                looserElectors[i] = rand.Next(0, 2).ToString();
                looserVotes[i] = rand.Next(100000, 700000).ToString();
                looserPercentage[i] = rand.Next(5, 70).ToString();

                //Logger.WriteLine("ElectionHex " + stateCodes[i] + " = " + bounds.X + " " +  x );
            }

            // setting dummy data
            await HexShapes.SetRecordValuesAsync("WinnerEditable", winnerEditable);
            await HexShapes.SetRecordValuesAsync("ElectionYear", ElectionYear);
            await HexShapes.SetRecordValuesAsync("ElectionMode", ElectionMode);

            await HexShapes.SetRecordValuesAsync("WinnerName",       winnerCandidate);
            await HexShapes.SetRecordValuesAsync("WinnerParty",      winnerParty);
            await HexShapes.SetRecordValuesAsync("WinnerElectors",   winnerElectors);
            await HexShapes.SetRecordValuesAsync("WinnerVotes",      winnerVotes);
            await HexShapes.SetRecordValuesAsync("WinnerPercentage", winnerPercentage);

            await HexShapes.SetRecordValuesAsync("LooserName",       looserCandidate);
            await HexShapes.SetRecordValuesAsync("LooserVotes",      looserVotes);
            await HexShapes.SetRecordValuesAsync("LooserParty",      looserParty);
            await HexShapes.SetRecordValuesAsync("LooserElectors",   looserElectors);
            await HexShapes.SetRecordValuesAsync("LooserPercentage", looserPercentage);

            var geoRect = new Rect(-3.75, -3.5, 7, 7);
            await this.HexMap.UpdateWorldRectAsync(geoRect);
        }

        StateHasChanged();

        Console.WriteLine("ElectionHex Shapes Initalizing...  done");

        await Task.Delay(1);
    }

    private void OnChanged(string prop)
    {
        //Console.WriteLine("ElectionHex OnChanged " + prop);

        Task.Delay(1).ContinueWith((t) => OnChangedAsync());
    }

    private async Task OnChangedAsync()
    {
        if (this.Election != null && this.HexMap != null && this.HexShapes != null)
        {
            Logger.WriteLine("ElectionHex OnChangedAsync... " + this.Election.Year);
            this.CurrentYear = this.Election.Year;

            var results = Election.ResultsByStates;
            var winnerVotes = new string[results.Count];
            var winnerParty = new string[results.Count];
            var winnerElectors = new string[results.Count];
            var winnerCandidate = new string[results.Count];
            var winnerPercentage = new string[results.Count];

            var looserParty = new string[results.Count];
            var looserVotes = new string[results.Count];
            var looserElectors = new string[results.Count];
            var looserCandidate = new string[results.Count];
            var looserPercentage = new string[results.Count];

            var ElectionYear = new string[results.Count];
            var ElectionMode = new string[results.Count];

            for (int i = 0; i < results.Count; i++)
            {
                ElectionYear[i] = Election.Year.ToString();

                if (StatesLookup.ContainsKey(results[i].StateSymbol))
                {
                    var state = StatesLookup[results[i].StateSymbol];
                    //var statWithElections = state.Statehood < Election.Year;
                    var shapeIndex = state.Index;
                    //electionYear[shapeIndex] = "1840"; // state.Statehood.ToString();
                    ElectionYear[shapeIndex] = this.Election.Year.ToString();
                    ElectionMode[shapeIndex] = this.DisplayMode.ToString();

                    winnerParty[shapeIndex]     = results[i].WinnerParty;
                    winnerVotes[shapeIndex]     = results[i].WinnerVotes.ToString();
                    winnerCandidate[shapeIndex] = results[i].WinnerName;
                    winnerElectors[shapeIndex]  = results[i].WinnerElectors.ToString();
                    winnerPercentage[shapeIndex]= results[i].WinnerPercentage.ToString();

                    looserParty[shapeIndex]     = results[i].LooserParty;
                    looserVotes[shapeIndex]     = results[i].LooserVotes.ToString();
                    looserCandidate[shapeIndex] = results[i].LooserName;
                    looserElectors[shapeIndex]  = results[i].LooserElectors.ToString();
                    looserPercentage[shapeIndex]= results[i].LooserPercentage.ToString();
                }
            }

            await HexShapes.SetRecordValuesAsync("WinnerName",       winnerCandidate);
            await HexShapes.SetRecordValuesAsync("WinnerVotes",      winnerVotes);
            await HexShapes.SetRecordValuesAsync("WinnerParty",      winnerParty);
            await HexShapes.SetRecordValuesAsync("WinnerElectors",   winnerElectors);
            await HexShapes.SetRecordValuesAsync("WinnerPercentage", winnerPercentage);

            await HexShapes.SetRecordValuesAsync("LooserName",       looserCandidate);
            await HexShapes.SetRecordValuesAsync("LooserVotes",      looserVotes);
            await HexShapes.SetRecordValuesAsync("LooserParty",      looserParty);
            await HexShapes.SetRecordValuesAsync("LooserElectors",   looserElectors);
            await HexShapes.SetRecordValuesAsync("LooserPercentage", looserPercentage);

            await HexShapes.SetRecordValuesAsync("ElectionYear", ElectionYear);
            await HexShapes.SetRecordValuesAsync("ElectionMode", ElectionMode);
            //await HexShapes.SetRecordValuesAsync("ElectionsHeld", stateHeldElections);

            StateHasChanged();
        }

        await Task.Delay(1);
    }

    public int CurrentYear = 0;

    private Election _Election;
    [Parameter]
    public Election Election
    {
        get { return _Election; }
        set { _Election = value; this.OnChanged("Election"); }
    }

    private ElectionDisplayMode _DisplayMode = ElectionDisplayMode.Electoral;
    [Parameter]
    public ElectionDisplayMode DisplayMode
    {
        get { return _DisplayMode; }
        set { _DisplayMode = value; this.OnChanged("DisplayMode=" + value); }
    }

    RenderFragment CreateTooltip(DataContext context)
    {
        return @<div class="ui-tooltip-content" >
                <div>name</div>
                <div>Popular Votes: votes</div>
            </div>;
    }

}

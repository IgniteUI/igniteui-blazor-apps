@using Microsoft.AspNetCore.Components 
@using IgniteUI.Blazor.Controls
 
@inject IIgniteUIBlazor IgniteUIBlazor; 

<div class="igVertical" >

    @if (Election != null)
    {
        var candidate1 = Election.CandidateLeft;
        var candidate2 = Election.CandidateRight;

        var midPoint = "50% of votes";
        var value1 = "0.0";
        var value2 = "0.0";
        if (DisplayMode == ElectionDisplayMode.Electoral)
        {
            midPoint = Math.Round(DisplayInterval * 3) + " to win";
            value1 = candidate1.TotalElectors.ToString();
            value2 = candidate2.TotalElectors.ToString();
        }
        else
        {
            value1 = candidate1.TotalVotesPercent + "";
            value2 = candidate2.TotalVotesPercent + "";
        }

        var max = Math.Round(DisplayInterval * 6);
       
        var requirment = Math.Ceiling(Election.TotalElectors + 1 / 2.0);
        <div class="igCandidate-bar" >

            <div class="igCandidate" style="color: @candidate1.PartyColor; justify-content: flex-start; padding-left: 0rem; "> 
                <div class="igCandidate-value" style="padding-right: 0.5rem;"> @value1 </div>
                <div class="igCandidate-name"  style="text-align: left;"> 
                    <div class="igCandidate-name-first"> @candidate1.FirstName </div>
                    <div class="igCandidate-name-last" > @candidate1.LastName </div>
                </div>  
            </div>  

            <div class="igCandidate-target" style="">
                <img class="igCandidate-target-house" src="images/gauge_white_house.svg" />
                <div class="igCandidate-target-value" > @midPoint </div> 
                @*<div class="igCandidate-target-line"  />*@
                <img class="igCandidate-target-arrow" src="images/gauge_mid_arrow.png" />
            </div>
          
            <div class="igCandidate" style="color: @candidate2.PartyColor; justify-content: flex-end; padding-right: 0rem; "> 
                <div class="igCandidate-name"  style="text-align: right;"> 
                    <div class="igCandidate-name-first"> @candidate2.FirstName </div>
                    <div class="igCandidate-name-last" > @candidate2.LastName </div>
                </div>  
                <div class="igCandidate-value" style="padding-left: 0.5rem;"> @value2 </div>
            </div>  
        </div>
     
           <DataChart Height="1.5rem" Width="100%"
                      @ref="BarChartRef"
                      IsHorizontalZoomEnabled="true"
                      IsVerticalZoomEnabled="true" >

                <CategoryYAxis Name="yAxis" Label="Name" DataSource="@Election.CandidateOverlap"
                               Gap="0.0" Overlap="1" 
                               LabelVisibility="@Visibility.Collapsed"
                               TickLength="0"/>

                <NumericXAxis Name="xAxis"    
                              MinimumValue="0" 
                              MaximumValue="@max" 
                              Interval="@DisplayInterval"
                              TickLength="5" 
                              MajorStrokeThickness="0"  
                              LabelVisibility="@Visibility.Collapsed"
                              LabelLocation="@AxisLabelsLocation.OutsideBottom"
                              LabelVerticalAlignment="@VerticalAlignment.Top"
                              LabelTopMargin="2"
                              AbbreviateLargeNumbers="true">
                    @*<NumberFormatSpecifier Locale="en-US" 
                              LabelFormat="{0}"
                              LabelVisibility="@Visibility.Collapsed"
                                           MinimumFractionDigits="1">
                    </NumberFormatSpecifier>*@
                </NumericXAxis>
                

               @foreach (var candidate in @DisplayCandidates)
               {
                   //Console.WriteLine("Bar " + candidate.LastName + " " + candidate.PartyColor + " " + candidate.Stack.TotalElectors + " " + candidate.TotalElectors);
                       var candidateList = new List<Candidate>() { candidate };
                       <BarSeries
                          XAxisName="xAxis"
                          YAxisName="yAxis"
                          DataSource="@candidateList"
                          ValueMemberPath="@DisplayValue"
                          Title="@candidate.Name"
                          Brush="@candidate.PartyColor"
                          Outline="@candidate.PartyColor"
                          AreaFillOpacity="1"
                          ShowDefaultTooltip="false"
                          IsTransitionInEnabled="false"
                          IsHighlightingEnabled="false"
                          TooltipTemplate="@CreateTooltip">
                       </BarSeries>
                  
               }             
           </DataChart>
    }
         
</div>

@code {

    RenderFragment CreateTooltip(DataContext context)
    { 
        var brush = "";
        var votes = "";
        var electors = ""; 
        var name = "";

        if (context != null && context.Item != null)
        {
            var item = context.Item as Candidate;
            brush = item.PartyColor;
            name = item.Name;
            if (item.Party == "Other")
                name = "Other Candidates";
            else if (item.Party == "Tossup")
                name = "Tossup States";
            else
                name += " (" + item.PartyDisplay + ")";

            votes = item.TotalVotesMilions + "M (" + item.TotalVotesPercent + "%)";
            electors = item.TotalElectors + " (" + item.TotalElectorsPercent + "%)";
        }

        if (DisplayMode == ElectionDisplayMode.Popular)
        {
            return @<div class="ui-tooltip-content" >
                <div>@name</div>
                <div>Popular Votes: @votes</div>
            </div>;
        }
        else
        {
            return @<div class="ui-tooltip-content" >
                <div>@name</div>
                <div>Electoral Votes: @electors</div> 
            </div>;
        }
    }

    private ElectionDisplayMode _DisplayMode = ElectionDisplayMode.Electoral;
    [Parameter]
    public ElectionDisplayMode DisplayMode
    {
        get { return _DisplayMode; }
        set { _DisplayMode = value; this.OnDataChanged(); }
    }

    public string DisplayValue { get { return DisplayMode == ElectionDisplayMode.Electoral ?
                "Stack.TotalElectors" : "Stack.TotalVotes"; } }

    public string DisplayTitle { get { return DisplayMode == ElectionDisplayMode.Electoral ?
                "Electoral Votes" : "Popular Votes"; } }

    public double DisplayInterval { get { return DisplayMode == ElectionDisplayMode.Electoral ?
                Election.IntervalElectors : Election.IntervalVotes; } }

    public double DisplayMax { get { return DisplayMode == ElectionDisplayMode.Electoral ?
                Election.TotalElectors : Election.TotalVotes; } }

    public List<Candidate> DisplayCandidates { get; set; }

    private DataChart BarChart;
    public DataChart BarChartRef
    {
        get { return BarChart; }
        set { BarChart = value; this.OnChanged(); }
    }

    private Election election;
    [Parameter]
    public Election Election
    {
        get { return election; }
        set { election = value; this.OnDataChanged(); }
    }
    [Parameter]
    public string style { get; set; }

    public int CurrentYear = 0;


    private void OnDataChanged()
    {
        if (Election == null) return;
        if (Election.StackedCandidates == null) return;

        Logger.WriteLine("ElectionBar OnChanged... " + this.Election.Year);

        DisplayCandidates = Election.GetCandidates(DisplayMode);
        //if (DisplayMode == ElectionDisplayMode.Electoral)
        //{
        //    var candidates = new List<Candidate>();
        
        //    candidates = (from item in Election.StackedCandidates
        //                  orderby item.Stack.TotalElectors descending,
        //                  item.Name descending select item).ToList();

        //    DisplayCandidates = candidates
        //}
        //else
        //{
        //    DisplayCandidates = (from item in Election.StackedCandidates
        //                         orderby item.Stack.TotalVotes descending,
        //                         item.Name descending select item).ToList();
        //}
        this.CurrentYear = this.Election.Year;

        StateHasChanged();
    }

    private void OnChanged()
    {
        //Logger.WriteLine("ElectionBar updating... ");

        if (this.BarChart != null && this.Election != null && this.Election.Year != this.CurrentYear)
        {
            StateHasChanged();
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Logger.WriteLine("ElectionBar OnInitialized");

        DataChartCoreModule.Register(IgniteUIBlazor); //DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        DataChartVerticalCategoryModule.Register(IgniteUIBlazor);
        NumberAbbreviatorModule.Register(IgniteUIBlazor);
        ItemToolTipLayerModule.Register(IgniteUIBlazor);
        CategoryToolTipLayerModule.Register(IgniteUIBlazor);

        LegendModule.Register(IgniteUIBlazor);
        ItemLegendModule.Register(IgniteUIBlazor);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //Logger.WriteLine("ElectionBar OnInitializedAsync");

        await Task.Delay(1);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Logger.WriteLine("ElectionBar Rendering...");
            OnChanged();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

}

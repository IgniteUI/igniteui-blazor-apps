@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using IgniteUI.Blazor.Controls

@inject HttpClient Http
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject Infragistics.Samples.ElectionService ElectionService

<div class="igContainer" style="height: 100%">
     
     <GeographicMap Height="100%" Width="100%" Zoomable="false"
                    @ref="BubbleMapRef" 
                    BackgroundContent="@null">
            <GeographicSymbolSeries Name="bubbles"
                DataSource="@ResultsByStates"
                LatitudeMemberPath ="StateLocationY"
                LongitudeMemberPath="StateLocationX"
                ShowDefaultTooltip="true" 
                MarkerTemplateScript="onTemplateBubble">
            </GeographicSymbolSeries> 

     </GeographicMap>
              
</div>

@code {

    private ElectionDisplayMode _DisplayMode = ElectionDisplayMode.Electoral;
    [Parameter]
    public ElectionDisplayMode DisplayMode
    {
        get { return _DisplayMode; }
        set { _DisplayMode = value; this.OnChanged("DisplayMode=" + value); }
    }

    private Election _Election;
    [Parameter]
    public Election Election
    {
        get { return _Election; }
        set { _Election = value; this.OnChanged("Election"); }
    }


    private bool IsMapReady = false;
    private GeographicSymbolSeries BubbleSeries;
    private GeographicMap BubbleMap;
    public GeographicMap BubbleMapRef
    {
        get { return BubbleMap; }
        set { BubbleMap = value; this.OnChanged("BubbleMap"); }
    }

    private List<ResultsByState> ResultsByStates;

    private void OnChanged(string prop)
    {
        Logger.WriteLine("ElectionBubbles OnChanged... " + prop);

        if (this.Election != null &&
            this.Election.ResultsByStates != null)
        {
            if (this.BubbleMap != null && IsMapReady)
            {
                //Logger.WriteLine("ElectionBubbles NotifyClearItems... ");
                this.BubbleMap.NotifyClearItems(ResultsByStates);
            }

            if (this.BubbleSeries != null && IsMapReady)
            {
                this.BubbleSeries.DataSource = null;
            }
            //Logger.WriteLine("ElectionBubbles OnChanged... " + this.DisplayMode);
            //Logger.WriteLine("ElectionBubbles OnChanged... b=" + this.Election.ResultsByStates[0].ElectionMode);
            foreach(var item in this.Election.ResultsByStates)
            {
                item.ElectionMode = this.DisplayMode.ToString();
            }
            //Logger.WriteLine("ElectionBubbles OnChanged... a=" + this.Election.ResultsByStates[0].ElectionMode);

            ResultsByStates = this.Election.ResultsByStates;
            Logger.WriteLine("ElectionBubbles OnChanged Election=" + this.ResultsByStates.Count);

            if (this.BubbleSeries != null && IsMapReady)
            {
                this.BubbleSeries.DataSource = ResultsByStates;
            }
        }

        //IsMapReady && &&
        //this.ResultsByStates != null
        if (this.BubbleMap != null && IsMapReady)
        {
            //await Task.Delay(10);
            //var bubbleBounds = new Rect(-8, -8, 12, 12);
            //if (this.BubbleMap != null)
            //    this.BubbleMap.UpdateWorldRect(bubbleBounds);

            Task.Delay(100).ContinueWith((t) => ZoomAsync());
            //if (this.BubbleSeries != null)
            //{
            //    this.BubbleSeries.RenderSeries(false);
            //}
            //await this.ShapeMap.ActualSeries[0].RenderSeriesAsync(false);
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Logger.WriteLine("ElectionBubbles OnInitialized");

        DataChartInteractivityModule.Register(IgniteUIBlazor);
        GeographicMapModule.Register(IgniteUIBlazor);
    }

    public static Dictionary<string, StateLocation> StateLocations { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Logger.WriteLine("ElectionBubbles OnInitializedAsync");

        //ElectionService.Http = Http;
        //await ElectionService.LoadStateLocations();

        var rand = new Random();
        var parties = new List<string> { "Republican", "Democrat", "Tossup" };
        var states = new List<ResultsByState>();

        var locations = ElectionService.StateLocations.Values.ToList();
        for (int i = 0; i < locations.Count; i++)
        {
            var location = locations[i];

            var result = new ResultsByState();
            result.ElectionMode = ElectionDisplayMode.Electoral.ToString();

            result.StateLocationX = location.X;
            result.StateLocationY = location.Y;
            result.StateSymbol = location.ID;

            result.StateHeldElections = i % 4 == 0 ? false : true;
            if (result.StateHeldElections)
            {
                var p = rand.Next(0, parties.Count);
                result.WinnerElectors = rand.Next(5, 50);
                result.WinnerVotes = rand.Next(100000, 5000000) + rand.Next(100000, 700000);
                result.WinnerParty = parties[p];
                result.WinnerName = parties[p];

                p = rand.Next(0, parties.Count);
                result.LooserElectors = rand.Next(0, 2);
                result.LooserVotes = result.WinnerVotes * (rand.Next(1, 8) / 10.0);
                result.LooserParty = parties[p];

                var total = result.WinnerVotes + result.LooserVotes;
                result.WinnerPercentage   = result.WinnerVotes / total * 100;
                result.LooserPercentage = result.LooserVotes / total * 100;
            }

            states.Add(result);
        }

        ResultsByStates = states;

        Logger.WriteLine("ElectionBubbles OnInitializedAsync " + this.ResultsByStates.Count);

        await Task.Delay(1);

        await ZoomAsync();

        await Task.Delay(1);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        //base.OnAfterRenderAsync();
        if (firstRender)
        {
            //Logger.WriteLine("ElectionBubbles OnAfterRenderAsync...");
            this.IsMapReady = true;
            if (this.BubbleMap != null)
            {
                this.BubbleSeries = (GeographicSymbolSeries)this.BubbleMap.ActualSeries[0];
            }

            OnChanged("RenderAsync");
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    public void Zoom()
    {
        Logger.WriteLine("ElectionBubbles Zoom");
        if (this.BubbleMap != null)
        {
            var bubbleBounds = new Rect(-6, -6, 10, 10);
            this.BubbleMap.UpdateWorldRect(bubbleBounds);
        }
    }

    public async Task ZoomAsync()
    {
        Logger.WriteLine("ElectionBubbles ZoomAsync");
        if (BubbleMap != null)
        {
            var bubbleBounds = new Rect(-6, -6, 10, 10);
            await this.BubbleMap.UpdateWorldRectAsync(bubbleBounds);
        }

        await Task.Delay(1);
    }


}
